import { Injectable, BadRequestException, NotFoundException } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository, DataSource as TypeOrmDataSource } from 'typeorm';
import { Metric } from '../entities/metric.entity';
import { DataSource } from '../entities/data-source.entity';
import * as Papa from 'papaparse';
import * as ExcelJS from 'exceljs';

@Injectable()
export class AnalyticsService {
  constructor(
    @InjectRepository(Metric)
    private metricRepository: Repository<Metric>,
    
    @InjectRepository(DataSource)
    private dataSourceRepository: Repository<DataSource>,
    
    private readonly typeOrmDataSource: TypeOrmDataSource
  ) {}

  /**
   * Get available metrics based on user's role and permissions
   */
  async getAvailableMetrics(user: any): Promise<Metric[]> {
    // Base query
    const queryBuilder = this.metricRepository.createQueryBuilder('metric')
      .leftJoinAndSelect('metric.dataSource', 'dataSource')
      .where('metric.isActive = :isActive', { isActive: true });

    // If not admin, restrict metrics based on ownership and system metrics
    if (!user.roles.includes('admin')) {
      queryBuilder.andWhere('(metric.isSystem = true OR metric.userId = :userId)', { userId: user.id });
    }

    return queryBuilder.getMany();
  }

  /**
   * Get all available data sources
   */
  async getDataSources(): Promise<DataSource[]> {
    return this.dataSourceRepository.find({ 
      where: { isActive: true },
      order: { name: 'ASC' }
    });
  }

  /**
   * Run a simple SQL query
   */
  async runQuery(dataSourceId: string, queryString: string, user: any): Promise<any> {
    // Find the data source
    const dataSource = await this.dataSourceRepository.findOne({ 
      where: { id: dataSourceId }
    });

    if (!dataSource) {
      throw new NotFoundException(`Data source with ID ${dataSourceId} not found`);
    }

    // Validate query - in real implementation, you'd want to sanitize and validate the SQL
    // This is a simplified version
    if (!queryString || !queryString.trim().toLowerCase().startsWith('select')) {
      throw new BadRequestException('Only SELECT queries are allowed');
    }

    try {
      // Execute the query
      // In a real implementation, you would:
      // 1. Connect to the specified data source (might be external to the main DB)
      // 2. Execute the query against that data source
      // 3. Handle results appropriately
      
      // For this example, we'll simulate by executing against our own database
      const result = await this.typeOrmDataSource.query(queryString);
      
      return {
        success: true,
        data: result,
        columns: result.length > 0 ? Object.keys(result[0]) : [],
        rowCount: result.length
      };
    } catch (error) {
      throw new BadRequestException(`Query execution failed: ${error.message}`);
    }
  }

  /**
   * Run a more complex query defined as an object structure
   */
  async runComplexQuery(
    dataSourceId: string, 
    query: any, 
    params: any = {}, 
    user: any
  ): Promise<any> {
    // Find the data source
    const dataSource = await this.dataSourceRepository.findOne({ 
      where: { id: dataSourceId }
    });

    if (!dataSource) {
      throw new NotFoundException(`Data source with ID ${dataSourceId} not found`);
    }

    try {
      // For complex queries, we'd typically:
      // 1. Convert the query object to SQL or use an ORM builder
      // 2. Apply security checks
      // 3. Execute against the appropriate data source
      
      // For this example, we'll simulate a query builder
      let sqlQuery = 'SELECT ';
      
      // Add selected columns
      if (query.select && query.select.length > 0) {
        sqlQuery += query.select.join(', ');
      } else {
        sqlQuery += '*';
      }
      
      // Add from clause
      sqlQuery += ` FROM ${query.from}`;
      
      // Add joins if any
      if (query.joins && query.joins.length > 0) {
        for (const join of query.joins) {
          sqlQuery += ` ${join.type || 'LEFT'} JOIN ${join.table} ON ${join.on}`;
        }
      }
      
      // Add where clause if any
      if (query.where) {
        sqlQuery += ` WHERE ${query.where}`;
      }
      
      // Add group by if any
      if (query.groupBy && query.groupBy.length > 0) {
        sqlQuery += ` GROUP BY ${query.groupBy.join(', ')}`;
      }
      
      // Add order by if any
      if (query.orderBy && query.orderBy.length > 0) {
        sqlQuery += ` ORDER BY ${query.orderBy.join(', ')}`;
      }
      
      // Add limit and offset if any
      if (query.limit) {
        sqlQuery += ` LIMIT ${query.limit}`;
      }
      
      if (query.offset) {
        sqlQuery += ` OFFSET ${query.offset}`;
      }
      
      // Execute the query with parameters
      const result = await this.typeOrmDataSource.query(sqlQuery, params);
      
      return {
        success: true,
        data: result,
        columns: result.length > 0 ? Object.keys(result[0]) : [],
        rowCount: result.length,
        sql: sqlQuery
      };
    } catch (error) {
      throw new BadRequestException(`Query execution failed: ${error.message}`);
    }
  }

  /**
   * Get trend data for a specific metric over time
   */
  async getMetricTrend(
    metricId: string,
    startDate: string,
    endDate: string,
    interval: string = 'day',
    user: any
  ): Promise<any> {
    // Find the metric
    const metric = await this.metricRepository.findOne({
      where: { id: metricId },
      relations: ['dataSource']
    });

    if (!metric) {
      throw new NotFoundException(`Metric with ID ${metricId} not found`);
    }

    // Validate dates
    const start = new Date(startDate);
    const end = new Date(endDate);
    
    if (isNaN(start.getTime()) || isNaN(end.getTime())) {
      throw new BadRequestException('Invalid date format');
    }
    
    // Validate interval
    const validIntervals = ['hour', 'day', 'week', 'month', 'quarter', 'year'];
    if (!validIntervals.includes(interval)) {
      throw new BadRequestException(`Invalid interval. Must be one of: ${validIntervals.join(', ')}`);
    }

    try {
      // For PostgreSQL, we'll use date_trunc to group by the interval
      let sqlQuery = '';
      
      if (metric.sqlQuery) {
        // If the metric has a custom SQL query, use it as a subquery
        sqlQuery = `
          WITH metric_data AS (${metric.sqlQuery})
          SELECT
            date_trunc('${interval}', created_at) as time_period,
            ${this.getSqlAggregateFunction(metric.type)}
          FROM metric_data
          WHERE created_at BETWEEN $1 AND $2
          GROUP BY time_period
          ORDER BY time_period ASC
        `;
      } else {
        // Otherwise, build a query based on the metric type and target table
        // This is simplified and would need to be customized for real use cases
        sqlQuery = `
          SELECT
            date_trunc('${interval}', created_at) as time_period,
            ${this.getSqlAggregateFunction(metric.type)}
          FROM ${metric.dataSource.config.table || 'events'}
          WHERE created_at BETWEEN $1 AND $2
          GROUP BY time_period
          ORDER BY time_period ASC
        `;
      }
      
      const result = await this.typeOrmDataSource.query(sqlQuery, [start, end]);
      
      return {
        success: true,
        metric: metric.name,
        interval,
        startDate: start,
        endDate: end,
        data: result
      };
    } catch (error) {
      throw new BadRequestException(`Error getting trend data: ${error.message}`);
    }
  }

  /**
   * Export data based on a query to various formats
   */
  async exportData(
    dataSourceId: string,
    query: string,
    format: string = 'csv',
    user: any
  ): Promise<{ data: any; filename: string; contentType: string }> {
    // Run the query to get the data
    const queryResult = await this.runQuery(dataSourceId, query, user);
    
    if (!queryResult.success || !queryResult.data || queryResult.data.length === 0) {
      throw new BadRequestException('No data to export');
    }
    
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    let data, filename, contentType;
    
    switch (format.toLowerCase()) {
      case 'csv':
        data = Papa.unparse(queryResult.data);
        filename = `export-${timestamp}.csv`;
        contentType = 'text/csv';
        break;
        
      case 'json':
        data = JSON.stringify(queryResult.data, null, 2);
        filename = `export-${timestamp}.json`;
        contentType = 'application/json';
        break;
        
      case 'excel':
        const workbook = new ExcelJS.Workbook();
        const worksheet = workbook.addWorksheet('Data Export');
        
        // Add headers
        const columns = queryResult.columns.map(col => ({ header: col, key: col }));
        worksheet.columns = columns;
        
        // Add rows
        worksheet.addRows(queryResult.data);
        
        // Generate Excel file
        data = await workbook.xlsx.writeBuffer();
        filename = `export-${timestamp}.xlsx`;
        contentType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';
        break;
        
      default:
        throw new BadRequestException(`Unsupported export format: ${format}`);
    }
    
    return { data, filename, contentType };
  }

  /**
   * Generate insights based on data analysis
   */
  async getInsights(
    insightType: string,
    startDate: string,
    endDate: string,
    user: any
  ): Promise<any> {
    // Validate dates
    const start = new Date(startDate);
    const end = new Date(endDate);
    
    if (isNaN(start.getTime()) || isNaN(end.getTime())) {
      throw new BadRequestException('Invalid date format');
    }
    
    // Validate insight type
    const validInsightTypes = ['user_engagement', 'course_activity', 'resource_usage', 'assessment_performance'];
    if (!validInsightTypes.includes(insightType)) {
      throw new BadRequestException(`Invalid insight type. Must be one of: ${validInsightTypes.join(', ')}`);
    }
    
    // The actual implementation would run different analyses based on the insight type
    // This is a simplified version
    let insightQuery;
    switch (insightType) {
      case 'user_engagement':
        insightQuery = `
          -- Sample query for user engagement insights
          SELECT 
            user_id,
            COUNT(*) as total_logins,
            MAX(created_at) as last_login,
            COUNT(DISTINCT date(created_at)) as active_days,
            AVG(session_duration) as avg_session_duration
          FROM user_sessions
          WHERE created_at BETWEEN $1 AND $2
          GROUP BY user_id
          ORDER BY total_logins DESC
          LIMIT 100
        `;
        break;
        
      case 'course_activity':
        insightQuery = `
          -- Sample query for course activity insights
          SELECT 
            course_id,
            COUNT(DISTINCT user_id) as total_students,
            COUNT(*) as total_activities,
            AVG(duration) as avg_activity_duration
          FROM course_activities
          WHERE created_at BETWEEN $1 AND $2
          GROUP BY course_id
          ORDER BY total_activities DESC
          LIMIT 100
        `;
        break;
        
      // Additional insight types...
      
      default:
        insightQuery = `
          -- Generic sample query
          SELECT 
            date_trunc('day', created_at) as day,
            COUNT(*) as total_events
          FROM events
          WHERE created_at BETWEEN $1 AND $2
          GROUP BY day
          ORDER BY day ASC
        `;
    }
    
    try {
      const result = await this.typeOrmDataSource.query(insightQuery, [start, end]);
      
      return {
        success: true,
        insightType,
        startDate: start,
        endDate: end,
        data: result,
        insights: this.analyzeInsightData(insightType, result)
      };
    } catch (error) {
      throw new BadRequestException(`Error generating insights: ${error.message}`);
    }
  }

  /**
   * Helper function to analyze insight data and generate text insights
   */
  private analyzeInsightData(insightType: string, data: any[]): any {
    // This would be a more sophisticated analysis in a real application
    // For now, we'll return some simple metrics
    
    if (!data || data.length === 0) {
      return { message: 'No data available for the selected period' };
    }
    
    switch (insightType) {
      case 'user_engagement':
        return {
          totalUsers: data.length,
          averageLogins: this.average(data, 'total_logins'),